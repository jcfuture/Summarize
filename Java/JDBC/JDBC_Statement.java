package Summarize.JDBC;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class JDBC_Statement {
    /*Statement 执行sql的对象
    * boolean execute(String sql) 执行给定的 SQL 语句，该语句可能会返回多个结果。
    * boolean execute(String sql, int autoGeneratedKeys) 执行给定的 SQL 语句，该语句可能会返回多个结果，并指示驾驶员应提供任何自动生成的密钥以进行检索。
    * boolean execute(String sql, int[] columnIndexes) 执行给定的 SQL 语句，该语句可能会返回多个结果，并指示驱动程序应提供给定阵列中指示的自动生成密钥以进行检索。
    * boolean execute(String sql, String[] columnNames) 执行给定的 SQL 语句，该语句可能会返回多个结果，并指示驱动程序应提供给定阵列中指示的自动生成密钥以进行检索。
    * int[] executeBatch() 将一批命令提交到数据库执行，如果所有命令都成功执行，则返回一系列更新计数。
    * default long[] executeLargeBatch() 将一批命令提交到数据库执行，如果所有命令都成功执行，则返回一系列更新计数。
    * default long executeLargeUpdate(String sql) 执行给定的 SQL 语句，其中可能是一个或声明或 SQL 声明，不会返回任何内容，例如 SQL DDL 语句。INSERTUPDATEDELETE
    * default long executeLargeUpdate(String sql, int autoGeneratedKeys) 执行给定的 SQL 语句，并指示驾驶员使用给定的标记，说明是否应提供该对象产生的自动生成的密钥以进行检索。Statement
    * default long executeLargeUpdate(String sql, int[] columnIndexes) 执行给定的 SQL 语句，并指示驱动程序应提供给定阵列中指示的自动生成密钥以进行检索。
    * default long executeLargeUpdate(String sql, String[] columnNames) 执行给定的 SQL 语句，并指示驱动程序应提供给定阵列中指示的自动生成密钥以进行检索。
    * ResultSet executeQuery(String sql) 执行给定的 SQL 语句，该语句返回单个对象。ResultSet
    * int executeUpdate(String sql) 执行给定的 SQL 语句，其中可能是一个或声明或 SQL 声明，不会返回任何内容，例如 SQL DDL 语句。INSERTUPDATEDELETE
    * int executeUpdate(String sql, int autoGeneratedKeys) 执行给定的 SQL 语句，并指示驾驶员使用给定的标记，说明是否应提供该对象产生的自动生成的密钥以进行检索。Statement
    * int executeUpdate(String sql, int[] columnIndexes) 执行给定的 SQL 语句，并指示驱动程序应提供给定阵列中指示的自动生成密钥以进行检索。
    * int executeUpdate(String sql, String[] columnNames) 执行给定的 SQL 语句，并指示驱动程序应提供给定阵列中指示的自动生成密钥以进行检索。
    *     int 返回值：是这句sql语句影响的行数，可以通过影响的行数判断DML是否执行成功，返回值>0的则执行成功，反之，则失败*/
    public static void main(String[] args) throws Exception {
        //1 导入jar包 1-1复制jar包到项目的libs目录下 1-2libs右键add as library
        //2 注册驱动
        Class.forName("com.mysql.JDBC.Driver");
        // 3 获取数据库连接对象
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/数据库名称", "账户名", "密码");
        //4 定义SQL语句
        String sql = "SQL语句";
        //5 获取执行SQL语句的对象 Statement
        Statement s = conn.createStatement();
        //6 执行SQL，接受返回结果
        boolean b = s.execute(sql);
        //7 处理结果
        System.out.println(b);
        //8 释放资源
        conn.close();
        s.close();
    }
}
